<?php

class fixit_test{

	public function __construct(){
	}
	
	
	public function main(){
		$testResults = $this->tests();
		
		if($testResults['all'] == 1) drupal_set_message('Passed tests');

		if($testResults['all'] == 0) drupal_set_message('Failed tests');

		if(module_exists('devel')) dpm($testResults);
		
	}
	
		
	private function tests(){
		
		//Disable rule so we don't send any actual text messages during testing
		$rulesConfig = rules_config_load('rules_hellofixit_jobs_relay');
		$rulesConfig->active = FALSE;
		$rulesConfig->save();

		//prepopulate test results array 
		//0s will run test, will populate with 1s if successful
		//2s will not run
		$testResults = array(	'all' => 0,
								'fixit_settings' => 0,
								'fixit_terms' => 0);
								
		$testResults['text_in'] = array('spam' => 0,
										'spam_react' => 0,
										'take_job' => 0,
										'take_job_react' => 0,
										'feedback' => 0,
										'feedback_react' => 0,
										'add_to_job' => 0,
										'add_to_job_react' => 0,
										'update_zip' => 0,
										'update_zip_react' => 0,
										'new_fixit' => 0,
										'new_fixit_react' => 0,
										'new_customer' => 0,
										'new_customer_react' => 0,
										'new_job' => 0,
										'new_job_react' => 0);

		$testResults['jobs_relay']['needs_approval'] = 0;
		$testResults['jobs_relay']['approved'] = 0;
		$testResults['jobs_relay']['taken_not_notified_customer'] = 0;
		$testResults['jobs_relay']['taken_notified_customer'] = 0;
		$testResults['jobs_relay']['taken_details_sent_to_fixit'] = 0;
		
		//get settings
		//@todo - need a test for settings, so that it can't proceed without them
		$fSettings = hellofixit_settings();
		$testResults['fixit_settings'] = 1;

		//get taxonomy terms
		$terms1 = new fixit_terms();
		$fTerms = $terms1->main();
		if($fTerms['exist'] == 1){
			$testResults['fixit_terms'] = 1;
		}else{
			watchdog('hellofixit','fixit terms test failed', WATCHDOG_NOTICE);
			return $testResults;
		}

		//test text_in class
		foreach($testResults['text_in'] as $key => $test){
			if($test != 0) continue;
			$function = 'text_in' . '_' . $key . '_' . 'test';
			if(!method_exists($this,$function)) continue;
			$testResults = $this->$function($fTerms, $fSettings, $testResults);
		}

		//test jobs relay
		foreach($testResults['jobs_relay'] as $key => $test){
			if($test != 0) continue;
			$function = 'jobs_relay' . '_' . $key . '_' . 'test';
			if(!method_exists($this,$function)) continue;
			$testResults = $this->$function($fTerms, $fSettings, $testResults);
		}
		
		//this comes last after all the tests
		//if there are any zeros in any of the tests, it keeps 'all' set to zero
		//accepts arrays with one and two dimensional elements
		$testResults = $this->check_for_zeros($testResults);
		if(!$testResults['all'] == 1) watchdog('hellofixit','tests all not 1', WATCHDOG_NOTICE);
		
		$rulesConfig = rules_config_load('rules_hellofixit_jobs_relay');
		$rulesConfig->active = TRUE;
		$rulesConfig->save();

	return $testResults;
	}
	
		
	private function check_for_zeros($testResults){
		foreach($testResults as $i){
			if($i == 'all') continue;
			if($i == 0) return $testResults;
			if(is_array($i)){
				foreach($i as $key => $j){
					if($j == 0) return $testResults;
				}				
			}
		}
	$testResults['all'] = 1;
	return $testResults;
	}

	
	private function text_in_spam_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;
		
		//make a test customer
		$s1 = new person();
		$spammerNid = $s1->new_person_node('(512) 333-4444',
							$fTerms['person_types']['spammer'],
							'chrisfirst',
							'chrislast',
							'')->nid;

		//make a test fixit
		$f1 = new person();
		$fixitNid = $f1->new_person_node('(512) 777-8888',
							$fTerms['person_types']['fixit'],
							'frankfirst',
							'franklast',
							'')->nid;

		//simulate new text message
		$newText = array('cell' => '5123334444',
						'sms' => 'sms for spam test',
						'mms' => '',
						'cell_formatted' => '(512) 333-4444');
		
		//simulate a text in
		$t1 = new text_in();
		if($t1->main($newText,$fTerms,$fSettings,$textInSettings)['spam']['value'] == 1){
			$testResults['text_in']['spam'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}

		//now test for spam react (second test)
		
		//test to make sure job is set to denied
		$sql = "select cr.entity_id as job_nid,
						cr.field_customer_ref_target_id as customer_nid,
						n.created as when_created
				from 	field_data_field_cell_phone cp
				join 	field_data_field_customer_ref cr on cr.field_customer_ref_target_id = cp.entity_id
				join 	node n on n.nid = cr.entity_id
				join 	field_data_field_status s on s.entity_id = cr.entity_id
				where 	cp.field_cell_phone_value = :cell_formatted
				and 	s.field_status_tid = :denied
				and 	cr.bundle = 'job'
				and 	n.created > :oneMin";

		$oneMin = time() - 60;
		$args = array(	':cell_formatted' => $newText['cell_formatted'],
						':oneMin' => $oneMin,
						':denied' => $fTerms['job_statuses']['denied']);

		$result = db_query($sql,$args)->fetchAssoc();

		if(isset($result) and !$result == NULL) $testResults['text_in']['spam_react'] = 1;
		
		//cleanup
		node_delete($spammerNid);
		node_delete($fixitNid);
		node_delete($result['job_nid']);

	return $testResults;
	}
	
	
	function text_in_take_job_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;

		//--test procedure
		//need customer
		//need job
		//need fixit
		//need text out
		//make a simulated text message
		//simulate a new text coming in
		//record test result
		//query to see if job status was changed to taken
		//record test result
		//cleanup
		//return results
		
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4444',
						$fTerms['person_types']['customer'],
						'chrisfirst',
						'chrislast',
						'')->nid;

		//make a test job with customer set to test customer and
		//status set to needs_approval
		$j1 = new job();
		$jobNid = $j1->main($customerNid,'','job description','',$fTerms['job_statuses']['needs_approval'])->nid;

		//make a fixit person
		$f1 = new person();
		$fixitNid = $f1->new_person_node('(512) 777-8888',
						$fTerms['person_types']['fixit'],
						'frankfirst',
						'franklast',
						'')->nid;

		//make a text out
		$t1 = new text_out();
		$textNid = $t1->main($jobNid,
							'',
							$fixitNid,
							'do you want a job',
							'',
							$fTerms['text_out_types']['relay_to_fixit'],
							'(512) 777-8888')->nid;

		//make a simulated text message from the Fixit
		$newText = array('cell' => '5127778888',
						'sms' => 'sms for take job test - fixit',
						'mms' => '',
						'cell_formatted' => '(512) 777-8888');

		//simulate a text in
		$t1 = new text_in();
		if($t1->main($newText,$fTerms,$fSettings,$textInSettings)['take_job']['value'] == 1){
			$testResults['text_in']['take_job'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}
		
		//now test for react (second test)
		//test to make sure job is set to taken
		
		$sql = "	select n.nid as text_nid,
					n.created as text_time,
					j.field_job_target_id as job_nid,
					s.field_status_tid as job_status
		from 		{field_data_field_cell_phone cp}
		join 		{field_data_field_person_type pt} on cp.entity_id = pt.entity_id
		join 		{field_data_field_fixit_ref fr} on fr.field_fixit_ref_target_id = cp.entity_id
		join 		{field_data_field_job j} on j.entity_id = fr.entity_id
		join 		{node n} on n.nid = fr.entity_id
		join		{field_data_field_status s} on s.entity_id = j.field_job_target_id
		where 		cp.field_cell_phone_value = :cell_formatted
		and 		pt.field_person_type_tid = :person_type
		and 		fr.bundle = 'text_out'
		and 		n.created > :tenMin
		order by	n.created desc";
		
		$tenMin = time() - $fSettings['job_relay_time']['value'];
		$person_type = $fTerms['person_types']['fixit'];
		$args = array(':cell_formatted' => $newText['cell_formatted'], ':person_type' => $person_type, ':tenMin' => $tenMin);
		$result = db_query($sql,$args)->fetchAssoc();

		if(isset($result) and !$result == NULL){
			if($result['job_status'] == $fTerms['job_statuses']['taken_not_notified_customer']) $testResults['text_in']['take_job_react'] = 1;
		}
		
		//cleanup
		node_delete($customerNid);
		node_delete($jobNid);
		node_delete($fixitNid);
		node_delete($textNid);
	
	return $testResults;
	}
	
	
	private function text_in_feedback_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;

		//--test procedure
		//need customer
		//need fixit
		//need job with status taken-details sent
		//need text out to customer with type = request_feedback
		//make a simulated incoming text message array
		//simulate a new text coming in
		//see if taken = 1 on array
		//record test result
		//query to see if job status was changed to taken
		//record test result
		//cleanup (delete) nodes
		//return results
		
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4444',
							$fTerms['person_types']['customer'],
							'chrisfirst',
							'chrislast',
							'')->nid;

		$f1 = new person();
		$fixitNid = $f1->new_person_node('(512) 777-8888',
							$fTerms['person_types']['fixit'],
							'frankfirst',
							'franklast',
							'')->nid;

		$j1 = new job();
		$jobNid = $j1->main($customerNid,$fixitNid,'job description','',$fTerms['job_statuses']['taken_details_sent_to_fixit'])->nid;

		$t1 = new text_out();
		$textNid = $t1->main($jobNid,
							$customerNid,
							$fixitNid,
							'feedback request',
							'',
							$fTerms['text_out_types']['request_feedback'],
							'(512) 333-4444')->nid;

		//make a simulated text message from the Fixit
		$newText = array('cell' => '5123334444',
						'sms' => 'feedback from customer',
						'mms' => '',
						'cell_formatted' => '(512) 333-4444');
						
		//simulate a text in
		$t1 = new text_in();
		if($t1->main($newText,$fTerms,$fSettings,$textInSettings)['feedback']['value'] == 1){
			$testResults['text_in']['feedback'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}
						
		//now test for react (second test)
		//test to make sure feedback node exists
		
		$sql = "select 		n.nid as feedback_nid,
							n.created as created
				from		field_data_field_feedback f
				join		field_data_field_customer_ref cr on cr.entity_id = f.entity_id
				join		field_data_field_fixit_ref fr on fr.entity_id = f.entity_id
				join		node n on n.nid = f.entity_id
				where		n.created > :tenMin
				and			cr.field_customer_ref_target_id = :customer_nid
				and			fr.field_fixit_ref_target_id = :fixit_nid";

		$tenMin = time() - 600;
		$args = array(':customer_nid' => $customerNid,
						':fixit_nid' => $fixitNid,
						':tenMin' => $tenMin);
		$result = db_query($sql,$args)->fetchAssoc();
		if(isset($result) and !$result == NULL){
			$testResults['text_in']['feedback_react'] = 1;
		}
		
		//cleanup
		node_delete($customerNid);
		node_delete($fixitNid);
		node_delete($jobNid);
		node_delete($textNid);
		node_delete($result['feedback_nid']);
	
	return $testResults;
	}
	
	
	private function text_in_add_to_job_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;

		//--test procedure
		//need customer
		//need job with customer same as above
		//make a simulated incoming text message array
		//simulate a new text coming in
		//see if add_to_job = 1 on array
		//record test result
		
		//query to see if job status was changed to taken
		//record test result
		//cleanup (delete) nodes
		//return results
		
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4444',
							$fTerms['person_types']['customer'],
							'chrisfirst',
							'chrislast',
							'')->nid;

		$j1 = new job();
		$jobNid = $j1->main($customerNid,'','job description 1','',$fTerms['job_statuses']['needs_approval'])->nid;

		//make a simulated text message from the Fixit
		$newText = array('cell' => '5123334444',
						'sms' => 'job description 2',
						'mms' => '',
						'cell_formatted' => '(512) 333-4444');
						
		//simulate a text in
		$t1 = new text_in();
		if($t1->main($newText,$fTerms,$fSettings,$textInSettings)['add_to_job']['value'] == 1){
			$testResults['text_in']['add_to_job'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}
						
		//now test for react (second test)
		//test to make sure job sms field is set to new value
		if(($j1->get_job_info($jobNid)['sms']) == 'job description 2') $testResults['text_in']['add_to_job_react'] = 1;
		
		//cleanup
		node_delete($customerNid);
		node_delete($jobNid);
		
	return $testResults;
	}
	
	
	private function text_in_update_zip_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;

		//--test procedure
		//need customer
		//make a simulated incoming text message array (with zip in sms field)
		//simulate a new text coming in
		//see if update_zip = 1 on array
		//record test result
		//query to see if job status was changed to taken
		//record test result
		//cleanup (delete) nodes
		//return results
		
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4444',
							$fTerms['person_types']['customer'],
							'chrisfirst',
							'chrislast',
							78758)->nid;

		//make a simulated text message from the customer
		$newText = array('cell' => '5123334444',
						'sms' => 'word 78704 word',
						'mms' => '',
						'cell_formatted' => '(512) 333-4444');
						
		//simulate a text in
		$t1 = new text_in();
		if($t1->main($newText,$fTerms,$fSettings,$textInSettings)['update_zip']['value'] == 1){
			$testResults['text_in']['update_zip'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}
						
		//now test for react (second test)
		//see if the zip was changed
		if($c1->get_person_info($customerNid)['zip'] == 78704) $testResults['text_in']['update_zip_react'] = 1;
		
		//cleanup
		node_delete($customerNid);
		
	return $testResults;
	}
	
	
	private function text_in_new_fixit_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;

		//--test procedure
		//make a simulated incoming text message array (with zip in sms field)
		//simulate a new text coming in
		//see if new_fixit = 1 on array
		//record test result
		
		//make a simulated text message from the customer
		$newText = array('cell' => '5127778889',
						'sms' => 'hhh contractor jjj 12344',
						'mms' => '',
						'cell_formatted' => '(512) 777-8889');
						
		//simulate a text in
		$t1 = new text_in();
		$textInSettings = $t1->main($newText,$fTerms,$fSettings,$textInSettings);
		if($textInSettings['new_fixit']['value'] == 1){
			$testResults['text_in']['new_fixit'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}
		
		//now test for react (second test)
		//test to make sure new fixit exists
		
		$sql = "	select cp.entity_id as fixit_nid
		from 		{field_data_field_cell_phone cp}
		where 		cp.field_cell_phone_value = :cell_formatted";
		
		$args = array(':cell_formatted' => $newText['cell_formatted']);
		$result = db_query($sql,$args)->fetchAssoc();

		if(isset($result) and !$result == NULL){
			$testResults['text_in']['new_fixit_react'] = 1;

			//cleanup
			node_delete($result['fixit_nid']);
		}
	
	return $testResults;
	}
	
	
	private function text_in_new_customer_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;

		//--test procedure
		//make a simulated incoming text message array (with zip in sms field)
		//simulate a new text coming in
		//see if new_customer = 1 on array
		//record test result
		
		//make a simulated text message from the customer
		$newText = array('cell' => '5123334445',
						'sms' => 'hhh blah jjj 12344',
						'mms' => '',
						'cell_formatted' => '(512) 333-4445');
						
		//simulate a text in
		$t1 = new text_in();
		$textInSettings = $t1->main($newText,$fTerms,$fSettings,$textInSettings);
		if($textInSettings['new_customer']['value'] == 1){
			$testResults['text_in']['new_customer'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}
		
		//now test for react (second test)
		//test to make sure new customer exists		
		$sql = "	select 		cp.entity_id as customer_nid,
								n.created as when_created,
								cr.entity_id as job_nid
					from 		{field_data_field_cell_phone cp}
					left join	{field_data_field_customer_ref cr} on cr.field_customer_ref_target_id = cp.entity_id
					join		{node n} on n.nid = cp.entity_id
					where 		cp.field_cell_phone_value = :cell_formatted
					and			n.created > :oneMin";
		
		$oneMin = time() - 60;
		$args = array(':cell_formatted' => $newText['cell_formatted'],
						':oneMin' => $oneMin);
		$result = db_query($sql,$args)->fetchAssoc();

		if(isset($result) and !$result == NULL){
			$testResults['text_in']['new_customer_react'] = 1;

			//cleanup
			node_delete($result['customer_nid']);
			node_delete($result['job_nid']);
		}
	
	return $testResults;
	}	
	
	
	private function text_in_new_job_test(array $fTerms, array $fSettings, array $testResults){
		//get array of settings to know how to deal with jobs
		$textInSettings = text_in_settings();
		if(!isset($textInSettings) or $textInSettings == NULL) return $testResults;

		//--test procedure
		//make a new customer
		//make a simulated incoming text message array (with zip in sms field)
		//simulate a new text coming in
		//see if new_customer = 1 on array
		//record test result
		
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4445',
						$fTerms['person_types']['customer'],
						'chrisfirst',
						'chrislast',
						'')->nid;

		//make a simulated text message from the customer
		$newText = array('cell' => '5123334445',
						'sms' => 'hhh blah jjj hhh',
						'mms' => '',
						'cell_formatted' => '(512) 333-4445');
						
		//simulate a text in
		$t1 = new text_in();
		$textInSettings = $t1->main($newText,$fTerms,$fSettings,$textInSettings);
		if($textInSettings['new_job']['value'] == 1){
			$testResults['text_in']['new_job'] = 1;
		}else{
			//if it failed the first test, don't do the second
			return $testResults;
		}
		
		//now test for react (second test)
		//test to make sure new customer exists
		
		$sql = "	select 		cr.entity_id as job_nid
					from 		{field_data_field_cell_phone cp}
					join		field_data_field_customer_ref cr on cr.field_customer_ref_target_id = cp.entity_id
					where 		cp.field_cell_phone_value = :cell_formatted";
		
		$args = array(':cell_formatted' => $newText['cell_formatted']);
		$result = db_query($sql,$args)->fetchAssoc();

		if(isset($result) and !$result == NULL){
			$testResults['text_in']['new_job_react'] = 1;

			//cleanup
			node_delete($result['job_nid']);
			node_delete($customerNid);
			
		}
	
	return $testResults;
	}
	
	
	private function jobs_relay_needs_approval_test(array $fTerms, array $fSettings, array $testResults){
		//--test procedure
		//make a new customer
		//make a new job
		//call hellofixit_cron
		//see if there is a text out
		//record test result
		//cleanup
		
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4445',
						$fTerms['person_types']['customer'],
						'chrisfirst',
						'chrislast',
						'')->nid;
						
		//make a test job with customer set to test customer and
		//status set to needs_approval
		$j1 = new job();
		$jobNid = $j1->main($customerNid,'','job aaa bbb','',$fTerms['job_statuses']['needs_approval'])->nid;

		//run the jobs relay
		hellofixit_cron($fSettings['cron_pw']['value'],$testMode = 1);

		//find the text out that was just created
		$sql = "	select 		cr.entity_id as text_out_nid
					from 		field_data_field_customer_ref cr
					join		node n on n.nid = cr.entity_id
					where 		cr.field_customer_ref_target_id = :customerNid
					and			cr.bundle = 'text_out'
					and			n.created > :oneMin";
					
		$oneMin = time() - 60;
		$args = array(	':customerNid' => $customerNid,
						':oneMin' => $oneMin);

		//$result = db_query($sql,$args)->fetchAssoc();
		$result = db_query($sql,$args);
		
		//find all the text out nodes created during this test
		if(isset($result) and $result !== NULL){
			foreach($result as $r){
				$textOutNids[] = $r->text_out_nid;
			}
		}
		
		if(count($textOutNids) == 0) return $testResults;

		$testResults['jobs_relay']['needs_approval'] = 1;
		
		//cleanup
		node_delete($customerNid);
		node_delete($jobNid);

		if(isset($textOutNids) and !$textOutNids == NULL){
			foreach($textOutNids as $node){
				node_delete($node);
			}
		}
		
	return $testResults;
	}
	
	
	private function jobs_relay_approved_test(array $fTerms, array $fSettings, array $testResults){
		//--test procedure
		//make a new customer
		//make a new fixit
		//make a new job
		//call hellofixit_cron
		//see if there is a text out
		//record test result
		//cleanup
		
		//make a test customer
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4445',
						$fTerms['person_types']['customer'],
						'chrisfirst',
						'chrislast',
						76712)->nid;
						
		//make a test fixit
		$f1 = new person();
		$fixitNid = $f1->new_person_node('(512) 777-8888',
							$fTerms['person_types']['fixit'],
							'frankfirst',
							'franklast',
							76712)->nid;

		//make a test job
		$j1 = new job();
		$jobNid = $j1->main($customerNid,'','job aaa bbb','',$fTerms['job_statuses']['approved'])->nid;

		//run the jobs relay
		hellofixit_cron($fSettings['cron_pw']['value'],$testMode = 1);

		//find the text out that was just created
		$sql = "	select 		cr.entity_id as text_out_nid
					from 		field_data_field_fixit_ref cr
					join		node n on n.nid = cr.entity_id
					where 		cr.field_fixit_ref_target_id = :fixitNid
					and			cr.bundle = 'text_out'
					and			n.created > :oneMin";
					
		$oneMin = time() - 60;
		$args = array(	':fixitNid' => $fixitNid,
						':oneMin' => $oneMin);
		$result = db_query($sql,$args);
		
		//find all the text out nodes created during this test
		if(isset($result) and $result !== NULL){
			foreach($result as $r){
			$textOutNids[] = $r->text_out_nid;
			}
		}
		
		if(count($textOutNids) == 0) return $testResults;

		$testResults['jobs_relay']['approved'] = 1;

		//cleanup
		node_delete($customerNid);
		node_delete($fixitNid);
		node_delete($jobNid);

		if(isset($textOutNids) and !$textOutNids == NULL){
			foreach($textOutNids as $node){
				node_delete($node);
			}
		}

	return $testResults;
	}	

	
	private function jobs_relay_taken_not_notified_customer_test(array $fTerms, array $fSettings, array $testResults){
		//--test procedure
		//make a new customer
		//make a new fixit
		//make a new job
		//call hellofixit_cron
		//see if there is a text out
		//record test result
		//cleanup
		
		//make a test customer
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4445',
						$fTerms['person_types']['customer'],
						'chrisfirst',
						'chrislast',
						76712)->nid;
						
		//make a test fixit
		$f1 = new person();
		$fixitNid = $f1->new_person_node('(512) 777-8888',
							$fTerms['person_types']['fixit'],
							'frankfirst',
							'franklast',
							76712)->nid;

		//make a test job
		$j1 = new job();
		$jobNid = $j1->main($customerNid,$fixitNid,'job aaa bbb','',$fTerms['job_statuses']['taken_not_notified_customer'])->nid;

		//run the jobs relay
		hellofixit_cron($fSettings['cron_pw']['value'],$testMode = 1);

		//find the text out that was just created
		$sql = "	select 		cr.entity_id as text_out_nid
					from 		field_data_field_customer_ref cr
					join		node n on n.nid = cr.entity_id
					where 		cr.field_customer_ref_target_id = :customerNid
					and			cr.bundle = 'text_out'
					and			n.created > :oneMin";
					
		$oneMin = time() - 60;
		$args = array(	':customerNid' => $customerNid,
						':oneMin' => $oneMin);
		$result = db_query($sql,$args);
		
		//find all the text out nodes created during this test
		if(isset($result) and $result !== NULL){
			foreach($result as $r){
			$textOutNids[] = $r->text_out_nid;
			}
		}
		
		if(count($textOutNids) == 0) return $testResults;

		$testResults['jobs_relay']['taken_not_notified_customer'] = 1;

		//cleanup
		node_delete($customerNid);
		node_delete($fixitNid);
		node_delete($jobNid);

		if(isset($textOutNids) and !$textOutNids == NULL){
			foreach($textOutNids as $node){
				node_delete($node);
			}
		}

	return $testResults;
	}	
	

	private function jobs_relay_taken_notified_customer_test(array $fTerms, array $fSettings, array $testResults){
		//--test procedure
		//make a new customer
		//make a new fixit
		//make a new job
		//call hellofixit_cron
		//see if there is a text out
		//record test result
		//cleanup
		
		//make a test customer
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4445',
						$fTerms['person_types']['customer'],
						'chrisfirst',
						'chrislast',
						76712)->nid;
						
		//make a test fixit
		$f1 = new person();
		$fixitNid = $f1->new_person_node('(512) 777-8888',
							$fTerms['person_types']['fixit'],
							'frankfirst',
							'franklast',
							76712)->nid;

		//make a test job
		$j1 = new job();
		$jobNid = $j1->main($customerNid,$fixitNid,'job aaa bbb','',$fTerms['job_statuses']['taken_notified_customer'])->nid;

		//run the jobs relay
		hellofixit_cron($fSettings['cron_pw']['value'],$testMode = 1);

		//find the text out that was just created
		$sql = "	select 		cr.entity_id as text_out_nid
					from 		field_data_field_fixit_ref cr
					join		node n on n.nid = cr.entity_id
					where 		cr.field_fixit_ref_target_id = :fixitNid
					and			cr.bundle = 'text_out'
					and			n.created > :oneMin";
					
		$oneMin = time() - 60;
		$args = array(	':fixitNid' => $fixitNid,
						':oneMin' => $oneMin);
		$result = db_query($sql,$args);
		
		//find all the text out nodes created during this test
		if(isset($result) and $result !== NULL){
			foreach($result as $r){
			$textOutNids[] = $r->text_out_nid;
			}
		}
		
		if(count($textOutNids) == 0) return $testResults;

		$testResults['jobs_relay']['taken_notified_customer'] = 1;

		//cleanup
		node_delete($customerNid);
		node_delete($fixitNid);
		node_delete($jobNid);

		if(isset($textOutNids) and !$textOutNids == NULL){
			foreach($textOutNids as $node){
				node_delete($node);
			}
		}

	return $testResults;
	}
	
	
	private function jobs_relay_taken_details_sent_to_fixit_test(array $fTerms, array $fSettings, array $testResults){
		//--test procedure
		//make a new customer
		//make a new fixit
		//make a new job
		//call hellofixit_cron
		//see if there is a text out
		//record test result
		//cleanup
		
		//make a test customer
		$c1 = new person();
		$customerNid = $c1->new_person_node('(512) 333-4445',
						$fTerms['person_types']['customer'],
						'chrisfirst',
						'chrislast',
						76712)->nid;
						
		//make a test fixit
		$f1 = new person();
		$fixitNid = $f1->new_person_node('(512) 777-8888',
							$fTerms['person_types']['fixit'],
							'frankfirst',
							'franklast',
							76712)->nid;

		//make a test job
		$j1 = new job();
		$jobNid = $j1->main($customerNid,$fixitNid,'job aaa bbb','',$fTerms['job_statuses']['taken_details_sent_to_fixit'])->nid;

		//run the jobs relay
		hellofixit_cron($fSettings['cron_pw']['value'],$testMode = 1);

		//find the text out that was just created
		$sql = "	select 		cr.entity_id as text_out_nid
					from 		field_data_field_customer_ref cr
					join		node n on n.nid = cr.entity_id
					where 		cr.field_customer_ref_target_id = :customerNid
					and			cr.bundle = 'text_out'
					and			n.created > :oneMin";
					
		$oneMin = time() - 60;
		$args = array(	':customerNid' => $customerNid,
						':oneMin' => $oneMin);
		$result = db_query($sql,$args);
		
		//find all the text out nodes created during this test
		if(isset($result) and $result !== NULL){
			foreach($result as $r){
			$textOutNids[] = $r->text_out_nid;
			}
		}
		
		if(count($textOutNids) == 0) return $testResults;

		$testResults['jobs_relay']['taken_details_sent_to_fixit'] = 1;

		//cleanup
		node_delete($customerNid);
		node_delete($fixitNid);
		node_delete($jobNid);

		if(isset($textOutNids) and !$textOutNids == NULL){
			foreach($textOutNids as $node){
				node_delete($node);
			}
		}

	return $testResults;
	}

	}
